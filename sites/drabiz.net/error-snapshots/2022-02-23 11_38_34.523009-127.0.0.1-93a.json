{
 "etype": "TypeError",
 "evalue": "TypeError(\"unsupported operand type(s) for +: 'int' and 'str'\")",
 "exception": {
  "args": [
   40,
   34,
   117,
   110,
   115,
   117,
   112,
   112,
   111,
   114,
   116,
   101,
   100,
   32,
   111,
   112,
   101,
   114,
   97,
   110,
   100,
   32,
   116,
   121,
   112,
   101,
   40,
   115,
   41,
   32,
   102,
   111,
   114,
   32,
   43,
   58,
   32,
   39,
   105,
   110,
   116,
   39,
   32,
   97,
   110,
   100,
   32,
   39,
   115,
   116,
   114,
   39,
   34,
   44,
   41
  ],
  "with_traceback": [
   60,
   98,
   117,
   105,
   108,
   116,
   45,
   105,
   110,
   32,
   109,
   101,
   116,
   104,
   111,
   100,
   32,
   119,
   105,
   116,
   104,
   95,
   116,
   114,
   97,
   99,
   101,
   98,
   97,
   99,
   107,
   32,
   111,
   102,
   32,
   84,
   121,
   112,
   101,
   69,
   114,
   114,
   111,
   114,
   32,
   111,
   98,
   106,
   101,
   99,
   116,
   62
  ]
 },
 "frames": [
  {
   "call": "(request=<Request 'http://drabiz.net:8000/api/method/frappe.desk.form.save.savedocs' [POST]>)",
   "dump": {
    "frappe. api": "<module 'frappe.api' from '/opt/bench/erpnext/apps/frappe/frappe/api.py'>",
    "frappe.api. handle": "<function handle>",
    "global frappe": "<module 'frappe' from '/opt/bench/erpnext/apps/frappe/frappe/__init__.py'>",
    "response": "None"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/app.py",
   "func": "application",
   "lines": {
    "64": "",
    "65": "\t\telif request.path.startswith(\"/api/\"):",
    "66": "\t\t\tresponse = frappe.api.handle()",
    "67": "",
    "68": "\t\telif request.path.startswith('/backups'):"
   },
   "lnum": 66
  },
  {
   "call": "()",
   "dump": {
    "frappe. handler": "<module 'frappe.handler' from '/opt/bench/erpnext/apps/frappe/frappe/handler.py'>",
    "frappe.handler. handle": "<function handle>",
    "global frappe": "<module 'frappe' from '/opt/bench/erpnext/apps/frappe/frappe/__init__.py'>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/api.py",
   "func": "handle",
   "lines": {
    "52": "\tif call==\"method\":",
    "53": "\t\tfrappe.local.form_dict.cmd = doctype",
    "54": "\t\treturn frappe.handler.handle()",
    "55": "",
    "56": "\telif call==\"resource\":"
   },
   "lnum": 54
  },
  {
   "call": "()",
   "dump": {
    "cmd": "'frappe.desk.form.save.savedocs'",
    "data": "None",
    "global execute_cmd": "<function execute_cmd>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/handler.py",
   "func": "handle",
   "lines": {
    "29": "",
    "30": "\tif cmd != 'login':",
    "31": "\t\tdata = execute_cmd(cmd)",
    "32": "",
    "33": "\t# data can be an empty string or list which are valid responses"
   },
   "lnum": 31
  },
  {
   "call": "(cmd='frappe.desk.form.save.savedocs', from_async=False)",
   "dump": {
    "frappe. call": "<function call>",
    "frappe. form_dict": "{'doc': '{\"doctype\":\"Maintenance Schedule\",\"nami... 'Save', 'cmd': 'frappe.desk.form.save.savedocs'}",
    "global frappe": "<module 'frappe' from '/opt/bench/erpnext/apps/frappe/frappe/__init__.py'>",
    "method": "<function savedocs>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/handler.py",
   "func": "execute_cmd",
   "lines": {
    "65": "\t\tis_valid_http_method(method)",
    "66": "",
    "67": "\treturn frappe.call(method, **frappe.form_dict)",
    "68": "",
    "69": "def is_valid_http_method(method):"
   },
   "lnum": 67
  },
  {
   "call": "(fn=<function savedocs>, *args=(), **kwargs={'action': 'Save', 'cmd': 'frappe.desk.form.save.savedocs', 'doc': '{\"doctype\":\"Maintenance Schedule\",\"naming_series...roup\":null,\"company\":\"Draco\",\"amended_from\":null}'})",
   "dump": {
    "args": "()",
    "fn": "<function savedocs>",
    "newargs": "{'action': 'Save', 'doc': '{\"doctype\":\"Maintenance Schedule\",\"naming_series...roup\":null,\"company\":\"Draco\",\"amended_from\":null}'}"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/__init__.py",
   "func": "call",
   "lines": {
    "1218": "\tnewargs = get_newargs(fn, kwargs)",
    "1219": "",
    "1220": "\treturn fn(*args, **newargs)",
    "1221": "",
    "1222": "def get_newargs(fn, kwargs):"
   },
   "lnum": 1220
  },
  {
   "call": "(doc=<MaintenanceSchedule: MAT-MSH-2022-00001>, action='Save')",
   "dump": {
    "doc": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "doc. save": "<bound method Document.save of <MaintenanceSchedule: MAT-MSH-2022-00001>>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/desk/form/save.py",
   "func": "savedocs",
   "lines": {
    "18": "\t\t\tdoc.submit()",
    "19": "\t\telse:",
    "20": "\t\t\tdoc.save()",
    "21": "",
    "22": "\t\t# update recent documents"
   },
   "lnum": 20
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, *args=(), **kwargs={})",
   "dump": {
    "args": "()",
    "kwargs": "{}",
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "self. _save": "<bound method Document._save of <MaintenanceSchedule: MAT-MSH-2022-00001>>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "save",
   "lines": {
    "280": "\tdef save(self, *args, **kwargs):",
    "281": "\t\t\"\"\"Wrapper for _save\"\"\"",
    "282": "\t\treturn self._save(*args, **kwargs)",
    "283": "",
    "284": "\tdef _save(self, ignore_permissions=None, ignore_version=None):"
   },
   "lnum": 282
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, ignore_permissions=None, ignore_version=None)",
   "dump": {
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "self. insert": "<bound method Document.insert of <MaintenanceSchedule: MAT-MSH-2022-00001>>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "_save",
   "lines": {
    "302": "",
    "303": "\t\tif self.get(\"__islocal\") or not self.get(\"name\"):",
    "304": "\t\t\tself.insert()",
    "305": "\t\t\treturn",
    "306": ""
   },
   "lnum": 304
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, ignore_permissions=None, ignore_links=None, ignore_if_duplicate=False, ignore_mandatory=None, set_name=None, set_child_names=True)",
   "dump": {
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "self. run_before_save_methods": "<bound method Document.run_before_save_methods of <MaintenanceSchedule: MAT-MSH-2022-00001>>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "insert",
   "lines": {
    "233": "",
    "234": "\t\tself.flags.in_insert = True",
    "235": "\t\tself.run_before_save_methods()",
    "236": "\t\tself._validate()",
    "237": "\t\tself.set_docstatus()"
   },
   "lnum": 235
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>)",
   "dump": {
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "self. run_method": "<bound method Document.run_method of <MaintenanceSchedule: MAT-MSH-2022-00001>>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "run_before_save_methods",
   "lines": {
    "963": "",
    "964": "\t\tif self._action==\"save\":",
    "965": "\t\t\tself.run_method(\"validate\")",
    "966": "\t\t\tself.run_method(\"before_save\")",
    "967": "\t\telif self._action==\"submit\":"
   },
   "lnum": 965
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, method='validate', *args=(), **kwargs={})",
   "dump": {
    "Document. hook": "<function Document.hook>",
    "args": "()",
    "fn": "<function Document.run_method.<locals>.<lambda>>",
    "global Document": "<class 'frappe.model.document.Document'>",
    "kwargs": "{}",
    "out": "undefined",
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "run_method",
   "lines": {
    "860": "",
    "861": "\t\tfn.__name__ = str(method)",
    "862": "\t\tout = Document.hook(fn)(self, *args, **kwargs)",
    "863": "",
    "864": "\t\tself.run_notifications(method)"
   },
   "lnum": 862
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, *args=(), **kwargs={})",
   "dump": {
    "args": "()",
    "composed": "<function Document.hook.<locals>.compose.<locals>.runner>",
    "kwargs": "{}",
    "method": "'validate'",
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "composer",
   "lines": {
    "1153": "",
    "1154": "\t\t\tcomposed = compose(f, *hooks)",
    "1155": "\t\t\treturn composed(self, method, *args, **kwargs)",
    "1156": "",
    "1157": "\t\treturn composer"
   },
   "lnum": 1155
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, method='validate', *args=(), **kwargs={})",
   "dump": {
    "add_to_return_value": "<function Document.hook.<locals>.add_to_return_value>",
    "args": "()",
    "fn": "<function Document.run_method.<locals>.<lambda>>",
    "kwargs": "{}",
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "runner",
   "lines": {
    "1136": "\t\tdef compose(fn, *hooks):",
    "1137": "\t\t\tdef runner(self, method, *args, **kwargs):",
    "1138": "\t\t\t\tadd_to_return_value(self, fn(self, *args, **kwargs))",
    "1139": "\t\t\t\tfor f in hooks:",
    "1140": "\t\t\t\t\tadd_to_return_value(self, f(self, method, *args, **kwargs))"
   },
   "lnum": 1138
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>, *args=(), **kwargs={})",
   "dump": {
    "args": "()",
    "builtin getattr": "<built-in function getattr>",
    "fn": "undefined",
    "kwargs": "{}",
    "method": "'validate'",
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>"
   },
   "file": "/opt/bench/erpnext/apps/frappe/frappe/model/document.py",
   "func": "<lambda>",
   "lines": {
    "854": "",
    "855": "\t\tif hasattr(self, method) and hasattr(getattr(self, method), \"__call__\"):",
    "856": "\t\t\tfn = lambda self, *args, **kwargs: getattr(self, method)(*args, **kwargs)",
    "857": "\t\telse:",
    "858": "\t\t\t# hack! to run hooks even if method does not exist"
   },
   "lnum": 856
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>)",
   "dump": {
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "self. schedules": "[<MaintenanceScheduleDetail: 3b3261299f parent=MAT-MSH-2022-00001>]",
    "self. validate_no_of_visits": "<bound method MaintenanceSchedule.validate_no_of...its of <MaintenanceSchedule: MAT-MSH-2022-00001>>"
   },
   "file": "/opt/bench/erpnext/apps/erpnext/erpnext/maintenance/doctype/maintenance_schedule/maintenance_schedule.py",
   "func": "validate",
   "lines": {
    "207": "\t\tself.validate_dates_with_periodicity()",
    "208": "\t\tself.validate_sales_order()",
    "209": "\t\tif not self.schedules or self.validate_no_of_visits():",
    "210": "\t\t\tself.generate_schedule()",
    "211": ""
   },
   "lnum": 209
  },
  {
   "call": "(self=<MaintenanceSchedule: MAT-MSH-2022-00001>)",
   "dump": {
    "builtin len": "<built-in function len>",
    "builtin sum": "<built-in function sum>",
    "d": "undefined",
    "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>",
    "self. items": "[<MaintenanceScheduleItem: f6fe37589e parent=MAT-MSH-2022-00001>]",
    "self. schedules": "[<MaintenanceScheduleDetail: 3b3261299f parent=MAT-MSH-2022-00001>]"
   },
   "file": "/opt/bench/erpnext/apps/erpnext/erpnext/maintenance/doctype/maintenance_schedule/maintenance_schedule.py",
   "func": "validate_no_of_visits",
   "lines": {
    "200": "",
    "201": "\tdef validate_no_of_visits(self):",
    "202": "\t\treturn len(self.schedules) != sum(d.no_of_visits for d in self.items)",
    "203": "",
    "204": "\tdef validate(self):"
   },
   "lnum": 202
  }
 ],
 "locals": {
  "self": "<MaintenanceSchedule: MAT-MSH-2022-00001>"
 },
 "pyver": "Python 3.8.10: /opt/bench/erpnext/env/bin/python (prefix: /opt/bench/erpnext/env)",
 "timestamp": "2022-02-23 11:38:34.523137",
 "traceback": "Traceback (most recent call last):\n  File \"/opt/bench/erpnext/apps/frappe/frappe/app.py\", line 66, in application\n    response = frappe.api.handle()\n  File \"/opt/bench/erpnext/apps/frappe/frappe/api.py\", line 54, in handle\n    return frappe.handler.handle()\n  File \"/opt/bench/erpnext/apps/frappe/frappe/handler.py\", line 31, in handle\n    data = execute_cmd(cmd)\n  File \"/opt/bench/erpnext/apps/frappe/frappe/handler.py\", line 67, in execute_cmd\n    return frappe.call(method, **frappe.form_dict)\n  File \"/opt/bench/erpnext/apps/frappe/frappe/__init__.py\", line 1220, in call\n    return fn(*args, **newargs)\n  File \"/opt/bench/erpnext/apps/frappe/frappe/desk/form/save.py\", line 20, in savedocs\n    doc.save()\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 282, in save\n    return self._save(*args, **kwargs)\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 304, in _save\n    self.insert()\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 235, in insert\n    self.run_before_save_methods()\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 965, in run_before_save_methods\n    self.run_method(\"validate\")\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 862, in run_method\n    out = Document.hook(fn)(self, *args, **kwargs)\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 1155, in composer\n    return composed(self, method, *args, **kwargs)\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 1138, in runner\n    add_to_return_value(self, fn(self, *args, **kwargs))\n  File \"/opt/bench/erpnext/apps/frappe/frappe/model/document.py\", line 856, in <lambda>\n    fn = lambda self, *args, **kwargs: getattr(self, method)(*args, **kwargs)\n  File \"/opt/bench/erpnext/apps/erpnext/erpnext/maintenance/doctype/maintenance_schedule/maintenance_schedule.py\", line 209, in validate\n    if not self.schedules or self.validate_no_of_visits():\n  File \"/opt/bench/erpnext/apps/erpnext/erpnext/maintenance/doctype/maintenance_schedule/maintenance_schedule.py\", line 202, in validate_no_of_visits\n    return len(self.schedules) != sum(d.no_of_visits for d in self.items)\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n"
}